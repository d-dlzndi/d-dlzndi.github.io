(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[354],{7293:function(e,n,t){"use strict";t.d(n,{Z:function(){return o}});var a=t(2265);var r=JSON.parse('[{"title":"Hello! <br />I\'m SEO YUN, <br />Designer.","date":"2023-11-05T00:00:00.000Z","body":{"raw":"\\nNisi culpa sunt sint enim ut incididunt do aliqua. Velit incididunt sunt consequat excepteur consectetur aute culpa mollit. Sit ipsum pariatur nostrud quis nostrud excepteur officia nulla cupidatat nostrud officia. Aliquip nisi aliqua sint ad aliqua laboris eiusmod nulla tempor.\\n\\nVelit ea minim ullamco ea laboris ipsum proident laborum enim cillum officia. Ipsum officia aute ullamco tempor ad qui minim enim sunt nostrud. Consequat adipisicing deserunt veniam do amet.\\n","html":"<p>Nisi culpa sunt sint enim ut incididunt do aliqua. Velit incididunt sunt consequat excepteur consectetur aute culpa mollit. Sit ipsum pariatur nostrud quis nostrud excepteur officia nulla cupidatat nostrud officia. Aliquip nisi aliqua sint ad aliqua laboris eiusmod nulla tempor.</p>\\n<p>Velit ea minim ullamco ea laboris ipsum proident laborum enim cillum officia. Ipsum officia aute ullamco tempor ad qui minim enim sunt nostrud. Consequat adipisicing deserunt veniam do amet.</p>"},"_id":"Intro.md","_raw":{"sourceFilePath":"Intro.md","sourceFileName":"Intro.md","sourceFileDir":".","contentType":"markdown","flattenedPath":"Intro"},"type":"Post","slug":"Intro"},{"title":"Chronic Pain 2","date":"2018-01-02T00:00:00.000Z","body":{"raw":"\\nCHRONIC PAIN We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\\n","html":"<p>CHRONIC PAIN We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"chronic.md","_raw":{"sourceFilePath":"chronic.md","sourceFileName":"chronic.md","sourceFileDir":".","contentType":"markdown","flattenedPath":"chronic"},"type":"Post","slug":"chronic"},{"title":"My First Post","date":"2021-12-24T00:00:00.000Z","body":{"raw":"\\nUllamco et nostrud magna commodo nostrud ...\\n","html":"<p>Ullamco et nostrud magna commodo nostrud ...</p>"},"_id":"post_01.md","_raw":{"sourceFilePath":"post_01.md","sourceFileName":"post_01.md","sourceFileDir":".","contentType":"markdown","flattenedPath":"post_01"},"type":"Post","slug":"post_01"}]'),i=JSON.parse('[{"title":"\ucca0\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uaf43","image":"/images/chronic-pain-1.jpg","date":"2023-07-01T00:00:00.000Z","startDate":"2022-12-01T00:00:00.000Z","description":{"raw":"\uac04\ub2e8\ud55c \uc124\uba85\uc744 \uc785\ub825\ud574\uc694 **\ub8f0\ub8e8\ub784\ub77c**","html":"<p>\uac04\ub2e8\ud55c \uc124\uba85\uc744 \uc785\ub825\ud574\uc694 <strong>\ub8f0\ub8e8\ub784\ub77c</strong></p>"},"programs":["Maya","Unreal Engine 5","Substance Painter","After Effect","Photoshop","Premiere Pro"],"awards":[{"name":"\uc548\ub155\ud558\uc138\uc694","special":true,"href":"http://naver.com","type":"Award","_raw":{}},{"name":"\uc73c\uc544\uc559","special":false,"type":"Award","_raw":{}},{"name":"\ub8f0\ub8e8\ub784\ub77c","special":false,"type":"Award","_raw":{}}],"url":"/3D-Animation/A-Metal-Flower","body":{"raw":"\\nCHRONIC PAIN two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\\n\\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\\n\\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\\n","html":"<p>CHRONIC PAIN two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>\\n<ul>\\n<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>\\n<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>\\n</ul>\\n<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>"},"_id":"3D-Animation/A-Metal-Flower.md","_raw":{"sourceFilePath":"3D-Animation/A-Metal-Flower.md","sourceFileName":"A-Metal-Flower.md","sourceFileDir":"3D-Animation","contentType":"markdown","flattenedPath":"3D-Animation/A-Metal-Flower"},"type":"WorkPost","slug":"A-Metal-Flower","category":"3D-Animation"},{"title":"Chronic Pain 2","image":"/images/chronic-pain-2.jpg","date":"2018-01-02T00:00:00.000Z","description":{"raw":"This is my second article about chronic pain.","html":"<p>This is my second article about chronic pain.</p>"},"url":"/3D-Animation/chronic-pain-2","body":{"raw":"\\nCHRONIC PAIN We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.","html":"<p>CHRONIC PAIN We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"3D-Animation/chronic-pain-2.md","_raw":{"sourceFilePath":"3D-Animation/chronic-pain-2.md","sourceFileName":"chronic-pain-2.md","sourceFileDir":"3D-Animation","contentType":"markdown","flattenedPath":"3D-Animation/chronic-pain-2"},"type":"WorkPost","slug":"chronic-pain-2","category":"3D-Animation"},{"title":"Low Back Pain 1","image":"/images/low-back-pain-1.jpg","date":"2020-01-01T00:00:00.000Z","description":{"raw":"This is my first article about low back pain.","html":"<p>This is my first article about low back pain.</p>"},"url":"/Graphic-Design/low-back-pain-1","body":{"raw":"\\nLOW BACK PAIN Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\\n\\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\\n\\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.","html":"<p>LOW BACK PAIN Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>\\n<ul>\\n<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>\\n<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>\\n</ul>\\n<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>"},"_id":"Graphic-Design/low-back-pain-1.md","_raw":{"sourceFilePath":"Graphic-Design/low-back-pain-1.md","sourceFileName":"low-back-pain-1.md","sourceFileDir":"Graphic-Design","contentType":"markdown","flattenedPath":"Graphic-Design/low-back-pain-1"},"type":"WorkPost","slug":"low-back-pain-1","category":"Graphic-Design"},{"title":"Low Back Pain 2","image":"/images/low-back-pain-2.jpg","date":"2020-01-02T00:00:00.000Z","description":{"raw":"\ub0d0\ud788\ud788 This is my second article about low back pain.","html":"<p>\ub0d0\ud788\ud788 This is my second article about low back pain.</p>"},"url":"/Graphic-Design/low-back-pain-2%20copy%202","body":{"raw":"\\nLOW BACK PAIN We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\\n","html":"<p>LOW BACK PAIN We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"Graphic-Design/low-back-pain-2 copy 2.md","_raw":{"sourceFilePath":"Graphic-Design/low-back-pain-2 copy 2.md","sourceFileName":"low-back-pain-2 copy 2.md","sourceFileDir":"Graphic-Design","contentType":"markdown","flattenedPath":"Graphic-Design/low-back-pain-2 copy 2"},"type":"WorkPost","slug":"low-back-pain-2 copy 2","category":"Graphic-Design"},{"title":"Low Back Pain 2","image":"/images/low-back-pain-2.jpg","date":"2020-01-02T00:00:00.000Z","description":{"raw":"This is my second article about low back pain.","html":"<p>This is my second article about low back pain.</p>"},"url":"/Graphic-Design/low-back-pain-2%20copy","body":{"raw":"\\nLOW BACK PAIN We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.","html":"<p>LOW BACK PAIN We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"Graphic-Design/low-back-pain-2 copy.md","_raw":{"sourceFilePath":"Graphic-Design/low-back-pain-2 copy.md","sourceFileName":"low-back-pain-2 copy.md","sourceFileDir":"Graphic-Design","contentType":"markdown","flattenedPath":"Graphic-Design/low-back-pain-2 copy"},"type":"WorkPost","slug":"low-back-pain-2 copy","category":"Graphic-Design"},{"title":"Low Back Pain 2","image":"/images/low-back-pain-2.jpg","date":"2020-01-02T00:00:00.000Z","description":{"raw":"This is my second article about low back pain.","html":"<p>This is my second article about low back pain.</p>"},"url":"/Graphic-Design/low-back-pain-2","body":{"raw":"\\nLOW BACK PAIN We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.","html":"<p>LOW BACK PAIN We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"Graphic-Design/low-back-pain-2.md","_raw":{"sourceFilePath":"Graphic-Design/low-back-pain-2.md","sourceFileName":"low-back-pain-2.md","sourceFileDir":"Graphic-Design","contentType":"markdown","flattenedPath":"Graphic-Design/low-back-pain-2"},"type":"WorkPost","slug":"low-back-pain-2","category":"Graphic-Design"},{"title":"Pelvic Health 1","image":"/images/pelvic-health-1.jpg","date":"2019-08-01T00:00:00.000Z","description":{"raw":"This is my first article about pelvic health.","html":"<p>This is my first article about pelvic health.</p>"},"url":"/3D-Modeling/pelvic-health-1","body":{"raw":"\\nPevic Health Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\\n\\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\\n\\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.","html":"<p>Pevic Health Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>\\n<ul>\\n<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>\\n<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>\\n</ul>\\n<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>"},"_id":"3D-Modeling/pelvic-health-1.md","_raw":{"sourceFilePath":"3D-Modeling/pelvic-health-1.md","sourceFileName":"pelvic-health-1.md","sourceFileDir":"3D-Modeling","contentType":"markdown","flattenedPath":"3D-Modeling/pelvic-health-1"},"type":"WorkPost","slug":"pelvic-health-1","category":"3D-Modeling"},{"title":"Pelvic Health 2","image":"/images/pelvic-health-2.jpg","date":"2019-07-02T00:00:00.000Z","description":{"raw":"This is my second article about pelvic health.","html":"<p>This is my second article about pelvic health.</p>"},"url":"/3D-Modeling/pelvic-health-2","body":{"raw":"\\nPelvic Health We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.","html":"<p>Pelvic Health We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"3D-Modeling/pelvic-health-2.md","_raw":{"sourceFilePath":"3D-Modeling/pelvic-health-2.md","sourceFileName":"pelvic-health-2.md","sourceFileDir":"3D-Modeling","contentType":"markdown","flattenedPath":"3D-Modeling/pelvic-health-2"},"type":"WorkPost","slug":"pelvic-health-2","category":"3D-Modeling"},{"title":"Neck Pain 2","image":"/images/neck-pain-2.jpg","date":"2020-04-02T00:00:00.000Z","description":{"raw":"This is my second article about low back pain.","html":"<p>This is my second article about low back pain.</p>"},"url":"/Programming/neck-pain-2","body":{"raw":"\\nNeck Pain We recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\\n\\nYou can use Static Generation for many types of pages, including:\\n\\n- Marketing pages\\n- Blog posts\\n- E-commerce product listings\\n- Help and documentation\\n\\nYou should ask yourself: \\"Can I pre-render this page **ahead** of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.\\n\\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.\\n\\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.","html":"<p>Neck Pain We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>\\n<p>You can use Static Generation for many types of pages, including:</p>\\n<ul>\\n<li>Marketing pages</li>\\n<li>Blog posts</li>\\n<li>E-commerce product listings</li>\\n<li>Help and documentation</li>\\n</ul>\\n<p>You should ask yourself: \\"Can I pre-render this page <strong>ahead</strong> of a user\'s request?\\" If the answer is yes, then you should choose Static Generation.</p>\\n<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user\'s request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>\\n<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>"},"_id":"Programming/neck-pain-2.md","_raw":{"sourceFilePath":"Programming/neck-pain-2.md","sourceFileName":"neck-pain-2.md","sourceFileDir":"Programming","contentType":"markdown","flattenedPath":"Programming/neck-pain-2"},"type":"WorkPost","slug":"neck-pain-2","category":"Programming"},{"title":"Neck Pain 1","image":"/images/neck-pain-1.jpg","date":"2015-03-01T00:00:00.000Z","description":{"raw":"This is my first article about neck pain.","html":"<p>This is my first article about neck pain.</p>"},"url":"/Programming/portfolio-git-blog","body":{"raw":"\\nneck pain Next.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\\n\\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\\n\\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.","html":"<p>neck pain Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>\\n<ul>\\n<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>\\n<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>\\n</ul>\\n<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a \\"hybrid\\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>"},"_id":"Programming/portfolio-git-blog.md","_raw":{"sourceFilePath":"Programming/portfolio-git-blog.md","sourceFileName":"portfolio-git-blog.md","sourceFileDir":"Programming","contentType":"markdown","flattenedPath":"Programming/portfolio-git-blog"},"type":"WorkPost","slug":"portfolio-git-blog","category":"Programming"}]');var o=function(){let{category:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const n=[...i].sort(((e,n)=>Date.parse(n.date)-Date.parse(e.date))),t=(0,a.useMemo)((()=>n.reduce(((e,n)=>(e[n.category]=[...e[n.category]||[],n],e)),{})),[n]),r=e?t[e]:n,o=(0,a.useMemo)((()=>Object.entries(t).sort(((e,n)=>{const t=n[1],a=e[1];return t.length-a.length})).map((e=>{let[n]=e;return n}))),[t]),s=e=>o.includes(e)?"/work/".concat(e):"/work/";return{allPosts:n,filterPosts:r,categories:o,getCategoryUrl:s}}},1396:function(e,n,t){e.exports=t(8326)}}]);